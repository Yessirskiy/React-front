import React from 'react';
import { useEffect, useState, useContext } from 'react';

import { Skeleton, Space, Form, Button, DatePicker, Select, Tooltip } from 'antd';
import { getCountries, getCityById } from '../../../api/location';
import { updateProfile } from '../../../api/user';
import { UserOutlined, UploadOutlined, QuestionCircleOutlined } from '@ant-design/icons';
import NotificationContext from '../../../context/NotificationContext';
import { getDateFormatted, StringToDate } from '../../../utils/DateFormatter';
import useAxios from '../../../utils/UseAxios';


const UserAdditionalForm = ({ cardStyling, initialData }) => {
    const api = useAxios();
    const [changeAdditionalForm] = Form.useForm();
    const {setNotification} = useContext(NotificationContext);
    const [loading, setLoading] = useState(true);

    const [selectedCountry, setSelectedCountry] = useState(null);
    const [countries, setCountries] = useState([]);
    const [cities, setCities] = useState([]);
    const [cityLoading, setCityLoading] = useState(false);

    const formatDataValues = (data) => {
        if (data) {
            const processed = {
                birth_date: StringToDate(data.birth_date),
                english_level: data.english_level,
            }
            return processed;
        }
        return null;
    }

    const handleSubmit = async (e) => {
        const payload = {
            birth_date: getDateFormatted(e.birth_date),
            english_level: e.english_level,
        };
        try {
            const data = await updateProfile(api, payload);
            changeAdditionalForm.setFieldsValue(formatDataValues(data));
            setNotification({
                type: 'success',
                content: '–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.',
            });
        } catch (error) {
            setNotification({
                type: 'error',
                content: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.',
            });
        }
        
    };

    const fetchCountries = async () => {
        try {
            const data = await getCountries(api);
            const processed = data.map(country => {
                return {
                    value: country.id,
                    label: country.name,
                };
            });
            setCountries(processed);
        } catch (error) {
            setNotification({
                type: 'error',
                content: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω.',
            });
            setCountries([]);
        }
    }

    const onCountrySelect = async (country_id) => {
        setCityLoading(true);
        setSelectedCountry(country_id);
        try {
            const data = await getCityById(api, country_id);
            const processed = data.map(city => {
                return {
                    value: city.id,
                    label: city.name,
                };
            });
            setCities(processed);
        } catch (error) {
            setNotification({
                type: 'error',
                content: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤.',
            });
            setCities([]);
        } finally {
            setCityLoading(false);
        }
    }

    useEffect(() => {
        changeAdditionalForm.setFieldsValue(formatDataValues(initialData));
        if (initialData) {
            setLoading(false);
        }
    }, [initialData]);

    useEffect(() => {
        fetchCountries();
    }, []);

    useEffect(() => {
        changeAdditionalForm.setFieldsValue({
            address: {
                city: null,
            },
        });
    }, [selectedCountry]);

    const langLevels = [
        {
          value: 'A0',
          label: 'üçº –ù–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é',
        },
        {
          value: 'A1',
          label: 'üë∂ –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–ù–∞—á–∏–Ω–∞—é—â–∏–π)',
        },
        {
          value: 'A2',
          label: 'üó£Ô∏è –û—Å–Ω–æ–≤—ã –æ–±—â–µ–Ω–∏—è (–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π)',
        },
        {
          value: 'B1',
          label: 'üí¨ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π)',
        },
        {
          value: 'B2',
          label: 'üéØ –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π)',
        },
        {
          value: 'C1',
          label: 'üåê –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)',
        },
        {
          value: 'C2',
          label: 'üèÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–°–≤–æ–±–æ–¥–Ω—ã–π)',
        },
    ];

    return (
        <Skeleton active="true" loading={loading} title="false">
            <Form
                form={changeAdditionalForm}
                layout="vertical"
                onFinish={handleSubmit}
                style={cardStyling}
                variant='filled'
            >
                <Form.Item
                    label= "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
                >
                    <Space>
                        <Form.Item name="birth_date" noStyle>
                            <DatePicker placeholder='–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É' className='h-10'></DatePicker>
                        </Form.Item>
                        
                        <Tooltip title="–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –∏–º–µ—é—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ" placement='right'>
                            <QuestionCircleOutlined/>
                        </Tooltip>
                    </Space>
                </Form.Item>
                <Form.Item
                    label="–£—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"
                    name="english_level"
                >
                    <Select 
                        placeholder='–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å' 
                        options={langLevels}
                        className='h-10'
                    />
                </Form.Item>
                <Form.Item label="–õ–æ–∫–∞—Ü–∏—è">
                    <Space>
                        <Space.Compact>
                            <Form.Item
                                name={['address', 'country']}
                                noStyle
                            >
                                <Select 
                                    className='h-10' 
                                    placeholder="–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç—Ä–∞–Ω—É" 
                                    showSearch 
                                    value={selectedCountry}
                                    onSelect={onCountrySelect}
                                    optionFilterProp="label"
                                    options={countries}>
                                </Select>
                            </Form.Item>
                            <Form.Item
                                name={['address', 'city']}
                                noStyle
                            >
                                <Select
                                    className='h-10'
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥"
                                    disabled={cityLoading ? true : undefined}
                                    loading={cityLoading ? true : undefined}
                                    showSearch
                                    optionFilterProp="label"
                                    options={cities}>
                                </Select>
                            </Form.Item>
                        </Space.Compact>
                        <Tooltip title="–ì–æ—Ä–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á" placement='right'>
                            <QuestionCircleOutlined/>
                        </Tooltip>
                    </Space>
                    
                </Form.Item>
                <Form.Item className="m-0">
                    <div  style={{ textAlign: 'right' }}>
                    <Button type="primary" htmlType="submit" size='large'>
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </Button>
                    </div>
                </Form.Item>
            </Form>
        </Skeleton>
    )
}

export default UserAdditionalForm;